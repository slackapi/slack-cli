---
description: 
globs: *.go
alwaysApply: false
---
// Copyright 2022-2025 Salesforce, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

---

When modifying code, follow these guidelines for backward compatibility:

1. **Remove unused code by default** - If code was added in the current PR and is unused, it should be removed entirely.

2. **Only leave "legacy" code when explicitly instructed** - Only maintain backward compatibility for functions, methods, or APIs that are explicitly marked as needed for backward compatibility.

3. **Proper deprecation workflow**:
   - Mark deprecated code with clear comments (e.g., `// Deprecated: Use NewMethod instead. Will be removed in v2.0.0.`)
   - Add a `@deprecated` tag in godoc comments
   - For functions/methods: Create a wrapper that calls the new implementation and mark it as deprecated
   - For types/interfaces: Create compatibility layer with clear upgrade path

4. **Clean up strategy**:
   - Keep track of deprecated code in a central tracking issue
   - Set timeline for removal (typically 1-2 major versions later)
   - Never silently remove public APIs without deprecation notice

5. **Documentation**:
   - Document the deprecated functionality
   - Provide clear migration instructions

By following these guidelines, we maintain a balance between API stability for users and keeping the codebase clean and maintainable. 