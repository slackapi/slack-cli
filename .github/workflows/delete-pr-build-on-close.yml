name: Delete pre-release when a branch is deleted
# Runs when PRs are merged or closed.
# See https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#running-your-pull_request-workflow-when-a-pull-request-merges
# The circleci config builds CLI binaries when a PR is opened and hosts them under a GitHub (pre-)release named after the PR branch
# This workflow action deletes that pre-release when a PR is merged or closed.
on:
  delete:
    branches:

jobs:
  delete-pre-release:
    name: Delete pre-release if exists
    runs-on: ubuntu-latest
    steps:
      - name: Delete pre-release and tag named after branch
        env:
          GH_TOKEN: ${{ github.token }}
        shell: bash
        run: |
          # Escape tags to create a semantic version
          REF=$(echo "${{ github.event.ref }}" | sed 's/\//-/g')
          RELEASE_FOUND=1

          # Delete tags matching the pull request branch from forks
          if GH_DEBUG=1 gh release --repo="slackapi/slack-cli" delete "${REF}" -y --cleanup-tag; then
            echo "Successfully deleted ${REF}"
            RELEASE_FOUND=0
          else
            echo "Did not find ${REF} tag, trying version prefixes..."
          fi

          # Figure out tag name from branch name. This is coupled to the tag name generation that exists in .circleci/config.yml's `create-github-release` job.
          RELEASES=$(gh release list --repo="slackapi/slack-cli" --order="desc" --json="tagName" --exclude-drafts --exclude-pre-releases --limit=24 --jq ".[] | .tagName")
          for TAGS in $RELEASES; do
            TAG_NAME="${TAGS}-${REF}"
            echo "Identified pre-release tagname to ðŸ”ª: $TAG_NAME"

            # Delete the pre-release
            if GH_DEBUG=1 gh release --repo="slackapi/slack-cli" delete "$TAG_NAME" -y --cleanup-tag; then
              echo "Successfully deleted $TAG_NAME"
              RELEASE_FOUND=0
            else
              echo "Failed to find $TAG_NAME, trying next..."
            fi
            sleep 1
          done
          if [ "$RELEASE_FOUND" -ne 0 ]; then
            echo "No matching pre-releases tag was found for the branch $TAG_NAME in recent versions"
          fi
          exit "$RELEASE_FOUND"
